#!/usr/bin/env node
/**
 * Generates a TypeScript module exporting runtime environment values.
 * Values are sourced from process.env at build/serve time and written to
 * src/environments/runtime-env.generated.ts.
 */

import { writeFileSync, mkdirSync } from 'node:fs';
import { dirname, join, resolve } from 'node:path';
import { fileURLToPath } from 'node:url';

const ROOT_DIR = resolve(dirname(fileURLToPath(import.meta.url)), '..');
const OUTPUT_PATH = join(ROOT_DIR, 'src/environments/runtime-env.generated.ts');
const OUTPUT_DIR = dirname(OUTPUT_PATH);

const ENV_PREFIX = 'NG_APP_';

const collectRuntimeEnv = () => {
  const entries = Object.entries(process.env ?? {})
    .filter(([key]) => key.startsWith(ENV_PREFIX))
    .map(([key, value]) => [key, value ?? undefined]);

  return Object.fromEntries(entries);
};

const buildFileContents = (values) => {
  const serialized = Object.entries(values)
    .map(
      ([key, value]) => `  ${key}: ${value === undefined ? 'undefined' : JSON.stringify(value)},`,
    )
    .join('\n');

  return `/**
 * This file is auto-generated by tools/write-runtime-env.mjs.
 * Do not edit this file manually.
 */

export const runtimeEnv: Record<string, string | undefined> = {
${serialized}
};
`;
};

const main = () => {
  const values = collectRuntimeEnv();

  // Ensure the output directory exists (should already, but guard just in case).
  mkdirSync(OUTPUT_DIR, { recursive: true });

  const contents = buildFileContents(values);
  writeFileSync(OUTPUT_PATH, contents, 'utf8');
};

main();
